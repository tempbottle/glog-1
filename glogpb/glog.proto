

syntax = "proto3";

package glog;

import "paxos.proto";


enum ErrorCode {

    option allow_alias = true;

    OK = 0;

    ALREADY_EXIST = 1; 
    UNCOMMITED_INDEX = 1;
    LOGNAME_DONT_EXIST = 1;

    UNKNOWN = -1;

    // system
    TIMEOUT = -1000;
    GRPC_ERROR = -1100;

    // protobuf
    PROTOBUF_DUMP_ERROR = -1500;
    PROTOBUF_PICKLE_ERROR = -1501;

    // param
    INVALID_PARAMS = -10000;
    
    // logic
    LOGID_DONT_EXIST = -11000;    

    PAXOS_LOG_TRY_SET_ERROR = -11100;
    PAXOS_LOG_PREEMPTED = -11101;

    PAXOS_LOG_GET_ERROR = -12000;

};

message ProposeValue {
    uint64 seq = 1;
    uint64 timestamp = 2;
    bytes data = 3;
};

message MetaInfoEntry {
    uint64 logid = 1;
    bytes logname = 2;
    uint32 timestamp = 3;
};

message NoopMsg {
};

message RetCode {
    ErrorCode ret = 1;
};


message ProposeRequest {
    bytes data = 1;
};

message ProposeResponse {
    int32 retcode = 1;
};

message GetGlogRequest {
    uint64 index = 2;
};

message GetGlogResponse {
    string info = 1;
    bytes data = 2;
};


message LogId {
    uint64 logid = 1;
};

message PaxosInfoResponse {
    ErrorCode ret = 1;
    uint64 max_index = 2;
    uint64 commited_index = 3;
};

message TryProposeRequest {
    uint64 index = 1;
};


message GetRequest {
    uint64 logid = 1;
    uint64 index = 2;
};

message GetResponse {
    ErrorCode ret = 1;
    uint64 commited_index = 2;
    bytes data = 3;
};

message SetRequest {
    uint64 logid = 1;
    uint64 index = 2;
    bytes data = 3;
};


// it's bad name, i know!
message LogName {
    bytes logname = 1;
};

message LogIdResponse {
    ErrorCode ret = 1;
    uint64 logid = 2;
};

service Glog {

    // internal use
    rpc PostMsg (paxos.Message) returns (NoopMsg) {}

    rpc GetPaxosInfo (LogId) returns (PaxosInfoResponse) {}

    rpc TryCatchUp (NoopMsg) returns (NoopMsg) {}

    rpc CheckAndFixTimeoutPropose (NoopMsg) returns (NoopMsg) {}
    // end of internal use

    // public service
    rpc Get (GetRequest) returns (GetResponse) {}

    rpc Set (SetRequest) returns (RetCode) {}

    rpc CreateANewLog (LogName) returns (LogIdResponse) {}

    rpc QueryLogId (LogName) returns (LogIdResponse) {}
    // end of public service
}




