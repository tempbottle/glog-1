

syntax = "proto3";

package glog;

import "paxos.proto";

message ProposeValue {
    uint64 seq = 1;
    uint64 timestamp = 2;
    bytes data = 3;
};

message MetaInfoEntry {
    uint64 logid = 1;
    bytes logname = 2;
    uint32 timestamp = 3;
};

message NoopMsg {
};

message RetCode {
    int32 ret = 1;
};


message ProposeRequest {
    bytes data = 1;
};

message ProposeResponse {
    int32 retcode = 1;
};

message GetGlogRequest {
    uint64 index = 2;
};

message GetGlogResponse {
    string info = 1;
    bytes data = 2;
};

message PaxosInfo {
    uint64 max_index = 1;
    uint64 commited_index = 2;
};

message TryProposeRequest {
    uint64 index = 1;
};


message GetRequest {
    uint64 logid = 1;
    uint64 index = 2;
};

message GetResponse {
    int32 ret = 1;
    uint64 commited_index = 2;
    bytes data = 3;
};

message SetRequest {
    uint64 logid = 1;
    uint64 index = 2;
    bytes data = 3;
};


// it's bad name, i know it!
message PaxosLogName {
    bytes logname = 1;
};

message PaxosLogId {
    int32 ret = 1;
    uint64 logid = 2;
};

service Glog {

    rpc PostMsg (paxos.Message) returns (NoopMsg) {}

    rpc Propose (ProposeRequest) returns (ProposeResponse) {}

    // internal use
    rpc GetPaxosInfo (NoopMsg) returns (PaxosInfo) {}

    rpc TryCatchUp (NoopMsg) returns (NoopMsg) {}

    rpc TryPropose (TryProposeRequest) returns (NoopMsg) {}

    // ADD FOR TEST
    rpc GetGlog (GetGlogRequest) returns (GetGlogResponse) {}

    rpc Get (GetRequest) returns (GetResponse) {}

    rpc Set (SetRequest) returns (RetCode) {}

    rpc CreateANewLog (PaxosLogName) returns (PaxosLogId) {}

    rpc QueryLogId (PaxosLogName) returns (PaxosLogId) {}

}




